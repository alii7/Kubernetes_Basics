Kubernetes (Docker) images are the key building blocks of Containerized Infrastructure.
Each container in a pod has its Docker image running inside it.

Following is the common configuration structure which will pull image from Docker registry and deploy in to Kubernetes container :

apiVersion: v1                                                            #
kind: pod                                                                 #
metadata:                                                                 #
   name: Tesing_for_Image_pull -----------> 1                             #
   spec:                                                                  #       CONFIGURATION STRUCTURE
      containers:                                                         #
         - name: neo4j-server ------------------------> 2                 #
         image: <Name of the Docker image>----------> 3                   #
         imagePullPolicy: Always ------------->4                          #
         command: ["echo", "SUCCESS"] ------------------->                #
         
name: Tesing_for_Image_pull − This name is given to identify and check what is the name of the container that would get created after pulling the images from Docker registry.
name: neo4j-server − This is the name given to the container that we are trying to create. Like we have given neo4j-server.
image: <Name of the Docker image> − This is the name of the image which we are trying to pull from the Docker or internal registry of images. We need to define a complete registry path along with the image name that we are trying to pull.
imagePullPolicy − Always - This image pull policy defines that whenever we run this file to create the container, it will pull the same name again.
command: [“echo”, “SUCCESS”] − With this, when we create the container and if everything goes fine, it will display a message when we will access the container.

kubectl create –f Tesing_for_Image_pull               # to pull the image and create a container
kubectl log Tesing_for_Image_pull                     # to check output of success or failure


The main function of a job is to create one or more pod and tracks about the success of pods.They ensure that the specified number of pods are completed successfully.
When a specified number of successful run of pods is completed, then the job is considered complete.

apiVersion: v1                                                 #
kind: Job ------------------------> 1                          #
metadata:                                                      #
   name: py                                                    #
   spec:                                                       #
   template:                                                   #
      metadata                                                 #      CREATING JOB EXAMPLE
      name: py -------> 2                                      #
      spec:                                                    #
         containers:                                           #
            - name: py ------------------------> 3             #
            image: python----------> 4                         #
            command: ["python", "SUCCESS"]                     #
            restartPocliy: Never --------> 5                   #


kind: Job → We have defined the kind as Job which will tell kubectl that the yaml file being used is to create a job type pod.
Name:py → This is the name of the template that we are using and the spec defines the template.
name: py → we have given a name as py under container spec which helps to identify the Pod which is going to be created out of it.
Image: python → the image which we are going to pull to create the container which will run inside the pod.
restartPolicy: Never →This condition of image restart is given as never which means that if the container is killed or if it is false, then it will not restart itself.

kubectl create –f py.yaml                 # to create a job
kubectl describe jobs/py                  # to check the status of a job

Scheduled job in Kubernetes uses Cronetes, which takes Kubernetes job and launches them in Kubernetes cluster.

Scheduling a job will run a pod at a specified point of time.
A parodic job is created for it which invokes itself automatically.


apiVersion: v1                                           #
kind: Job                                                #
metadata:                                                #
   name: py                                              #
spec:                                                    #
   schedule: h/30 * * * * ? -------------------> 1       #
   template:                                             #
      metadata                                           #
         name: py                                        #     SCHEDULED JOB EXAMPLE
      spec:                                              #
         containers:                                     #
         - name: py                                      #
         image: python                                   #
         args:                                           #
/bin/sh -------> 2                                       #
-c                                                       #
ps –eaf ------------> 3                                  #  
restartPocliy: OnFailure                                 #


schedule: h/30 * * * * ? → To schedule the job to run in every 30 minutes.
/bin/sh: This will enter in the container with /bin/sh
ps –eaf → Will run ps -eaf command on the machine and list all the running process inside a container.

This scheduled job concept is useful when we are trying to build and run a set of tasks at a specified point of time and then complete the process.

